# -*- coding: utf-8 -*-
"""Week 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tvaaJ0jM7fsKa9REJZW9h2qzF4QFpIOf
"""

import networkx as nx
import matplotlib.pyplot as plt

g = nx.Graph()

for i in range(16):
    g.add_node(chr(i+65))

g.nodes

g.add_edges_from([
    ("A", "D"),("A", "E"),("A", "F"),("A","H"),("A","G"),
    ("G","B"),
    ("B","I"),("B","J"), ("B","K"),("B","L"),
    ("L","C"),
    ("C","M"),("C","N"),("C","O"),("C","P")
    ])

nx.draw(g, with_labels=True, font_weight='bold')

g1 = nx.Graph()

for i in range(5):
    g1.add_node(chr(i+65))

g1.add_edges_from([
    ("A","B"),("B","C"),("C","D"),("C","E"),("D","E")
])

degree = dict(g1.degree())
print("Degree: ", degree)

degree_centrality = nx.degree_centrality(g1)
print("Degree Centrality: ", degree_centrality)
closeness_centrality = nx.closeness_centrality(g1)
print("Closeness Centrality: ", closeness_centrality)
betweenness_centrality = nx.betweenness_centrality(g1)
print("Betweenness Centrality: ", betweenness_centrality)

from inspect import GEN_RUNNING
def group_degree_centralization(G):
    max_deg_centrality = max(nx.degree_centrality(G)[node] for node in G.nodes())
    group_deg_centrality = nx.degree_centrality(G)
    g = G.number_of_nodes()
    sum_diff = sum(max_deg_centrality - group_deg_centrality[node] for node in G)
    return sum_diff / ((g - 1) * (g - 2))

def group_closeness_centralization(G):
    max_closeness_centrality = max(nx.closeness_centrality(G)[node] for node in G.nodes())
    group_closeness_centrality = nx.closeness_centrality(G)
    g = G.number_of_nodes()
    sum_diff = sum(max_closeness_centrality - group_closeness_centrality[node] for node in G)
    return sum_diff / ((g - 2) * (g - 1) / (2 * g - 3))

def group_betweenness_centralization(G):
    max_betweenness_centrality = max(nx.betweenness_centrality(G)[node] for node in G.nodes())
    group_betweenness_centrality = nx.betweenness_centrality(G)
    g = G.number_of_nodes()
    sum_diff = sum(max_betweenness_centrality - group_betweenness_centrality[node] for node in G)
    return sum_diff / (g - 1)

g_degree_centralization = group_degree_centralization(g1)
print("Group Degree Centralization: ", g_degree_centralization)

g_closeness_centralization = group_closeness_centralization(g1)
print("Group Closeness Centralization: ", g_closeness_centralization)

g_betweenness_centralization = group_betweenness_centralization(g1)
print("Group Betweenness Centralization: ", g_betweenness_centralization)

# nx.degree_centrality()에서 반환된 값은 normalizede된 값,
# Group degree centrality 계산 시 사용되는 term은 Standardized되지 않은 Actor degree centrality로,
# nx.degree_centrality()에서 반환된 값에 (g-1)을 곱해준 다음 사용해야함

def group_degree_centralization_modified(G):
    g = G.number_of_nodes()
    max_deg_centrality = max(nx.degree_centrality(G)[node]*(g-1) for node in G.nodes())
    group_deg_centrality = nx.degree_centrality(G)
    g = G.number_of_nodes()
    sum_diff = sum(max_deg_centrality - (group_deg_centrality[node]*(g-1)) for node in G)
    return sum_diff / ((g - 1) * (g - 2))

g_degree_centralization = group_degree_centralization_modified(g1)
print("Group Degree Centralization: ", g_degree_centralization)

nx.draw(g1, with_labels=True, font_weight='bold')